  //sphere position:Vector3d,
    //const alpha:number = 1;
    public applyTransform(sphereRadius:number){
        
        const maxForze:number  = sphereRadius;
        const dist_min:number  = DataUtil.getDistanceMinByFlag(this.vertex);
        const dist_max:number  = DataUtil.getDistanceMaxByFlag(this.vertex);
        const dist_diff:number = dist_max-dist_min;

        
        for (let idx:number=0;idx<this.vertex.length;idx++) { 
            //console.log(this.vertex[idx].flag_distance);    
              if(this.vertex[idx].flag_selected==1){
                const dist_calc:number = dist_max- this.vertex[idx].flag_distance;
                const perc_calc:number = XMath.getPercent(dist_diff,dist_calc);
                const forze_calc:number = XMath.getValueOfPercent(maxForze,perc_calc);
                //console.log(this.vertex[idx].flag_distance;);
                this.vertex[idx].position[1] -= forze_calc;
              }
        }


        const positionsAttribute = this.geometry.getAttribute('position') as THREE.BufferAttribute;
        const positionsArray = positionsAttribute.array as Float32Array;

        // Recorrer tus Point3d y copiar las nuevas posiciones al Float32Array del BufferGeometry
        for (let i = 0; i < this.vertex.length; i++) {
            const point = this.vertex[i].position;
            positionsArray[i * 3 + 0] = point[0];
            positionsArray[i * 3 + 1] = point[1];
            positionsArray[i * 3 + 2] = point[2];
        }
        
        // Indicar a Three.js que el atributo 'position' ha sido modificado
        positionsAttribute.needsUpdate = true;

        // Recalcular las normales, ya que la forma de la superficie ha cambiado
        this.geometry.computeVertexNormals();        
        

    }//end